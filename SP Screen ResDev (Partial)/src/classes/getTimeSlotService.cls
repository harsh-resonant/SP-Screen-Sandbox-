@RestResource(urlMapping='/GetTimeSlots/*')
global with sharing class getTimeSlotService {
    @HttpPOST
    global static ServiceResponse getTimeSlots() {
        
        //OperatingHours abOperatingHours = [SELECT Name, Id, (SELECT EndTime, StartTime, Type, DayOfWeek FROM TimeSlots) FROM OperatingHours WHERE Name = 'Sales Reps Calendar' limit 1];
        //Timezone tz = UserInfo.getTimeZone();
        RestRequest jsonString = RestContext.request;
        //RestResponse res = RestContext.response;
        system.debug(jsonString.requestBody.toString());
        reqParams reqObj = (reqParams)JSON.deserialize(jsonString.requestBody.toString(), reqParams.class);
        //ServiceAppointment saObj = [select Id, ServiceTerritory.OperatingHours.Name from ServiceAppointment where id=: reqObj.saId];
        List<SlotWrapper> lstSlotWrap = new List<SlotWrapper>();
        //if(saObj != null && saObj.ServiceTerritory.OperatingHours.Name != null){
            //String calndrName = saObj.ServiceTerritory.OperatingHours.Name;
            OperatingHours abOperatingHours = [SELECT Name, Id, (SELECT EndTime, StartTime, Type, DayOfWeek FROM TimeSlots) FROM OperatingHours WHERE Name = 'Sales Reps Calendar' limit 1];
            Timezone tz = UserInfo.getTimeZone();
            
            List<FSL.AppointmentBookingSlot> slots = FSL.AppointmentBookingService.GetSlots(reqObj.saId, reqObj.policyId, abOperatingHours, tz,  'SORT_BY_DATE', false) ;
            system.debug(slots);
            
            //StartDateSortWrapper[] allSlots = new List<StartDateSortWrapper>();
            for(Integer i =0;i<slots.size();i++){
                if(slots[i].Interval.Start >= System.Today()+1 && slots[i].Interval.Start <= System.Today()+35){
                    
                    /*datetime thisDT = slots[i].Interval.Start;
                    String myDateAET = thisDT.format('MM/dd/yyyy HH:mm:ss', 'Australia/Sydney'); 
                    datetime finish = slots[i].Interval.Finish;
                    String myDateAET1 = finish.format('MM/dd/yyyy HH:mm:ss', 'Australia/Sydney');
                    
                    UniqueIdGenerator obj_UniqueIdGenerator = new UniqueIdGenerator();                  
                    SlotWrapper obj_slot = new SlotWrapper();
                    Datetime mydatetime1 = slots[i].Interval.Start;
                    Datetime mydatetime2 = slots[i].Interval.Finish;
                    //obj_slot.Startdatetime =slots[i].Interval.Start;
                    //obj_slot.Enddatetime =  slots[i].Interval.Finish;
                    
                    String stringDate1 = myDateAET.substring(6,10) + '-' + myDateAET.substring(0,2) + '-' + myDateAET.substring(3,5) + ' ' + myDateAET.substring(11,19);
                    String stringDate2 = myDateAET1.substring(6,10) + '-' + myDateAET1.substring(0,2) + '-' + myDateAET1.substring(3,5) + ' ' + myDateAET1.substring(11,19);
                    //System.debug('*******' + stringDate1);
                    //System.debug('*******' + stringDate2);
                    DateTime dt1 = datetime.valueOf(stringDate1);
                    DateTime dt2 = datetime.valueOf(stringDate2);
                    //System.debug('********' + dt1.addHours(10));
                    //System.debug('********' + dt2.addHours(10));
                    obj_slot.Startdatetime = dt1.addHours(10);
                    obj_slot.Enddatetime =  dt2.addHours(10);
                    obj_slot.SlotDatefull = myDateAET ; 
                    obj_slot.SlotDate = Date.newInstance(dt1.year(),dt1.month(),dt1.day());
                    obj_slot.Datetoshow = dt1.format('d-MM-YYYY'); 
                    obj_slot.SlotDatetime = dt1;
                    obj_slot.endSlotDatetime= dt2;
                    obj_slot.Endtime = finish.format('h:mm a','AET');
                    obj_slot.Starttime = thisDT.format('h:mm a','AET');
                    System.debug(mydatetime1+' '+mydatetime2);
                    System.debug(myDateAET+' '+myDateAET1);
                    obj_slot.Slotid = obj_UniqueIdGenerator.generateRandomString(15);
                    lstSlotWrap.add(obj_slot);*/
                    UniqueIdGenerator obj_UniqueIdGenerator = new UniqueIdGenerator();                  
                    SlotWrapper obj_slot = new SlotWrapper();
                    Datetime mydatetime1 = slots[i].Interval.Start.addHours(-10);
                    Datetime mydatetime2 = slots[i].Interval.Finish.addHours(-10);
                    obj_slot.Startdatetime =slots[i].Interval.Start.addHours(-10);
                    obj_slot.Enddatetime =  slots[i].Interval.Finish.addHours(-10);
                    obj_slot.SlotDatefull = String.valueOf(mydatetime1.format('EEEE MMM dd  yyyy')); 
                    obj_slot.SlotDate = Date.newInstance(mydatetime1.year(),mydatetime1.month(),mydatetime1.day());
                    obj_slot.Datetoshow = mydatetime1.format('d-MM-YYYY'); 
                    obj_slot.SlotDatetime = mydatetime1;
                    obj_slot.endSlotDatetime= mydatetime2;
                    obj_slot.Endtime = String.valueOf(mydatetime2.format('h:mm a'));
                    obj_slot.Starttime = String.valueOf(mydatetime1.format('h:mm a'));
                    obj_slot.Slotid = obj_UniqueIdGenerator.generateRandomString(15);
                    
                    //allSlots.add(new StartDateSortWrapper(obj_slot));
                    lstSlotWrap.add(obj_slot);
                }
            }
        	//allSlots.Sort();
        	
        /*for(StartDateSortWrapper obj : allSlots){
            lstSlotWrap.add(obj.slot);
        }
        System.debug(LoggingLevel.ERROR,'Anuj '+lstSlotWrap);*/
        //}
        
		/*SlotWrapper temp = new SlotWrapper();
        for (Integer i = 0; i < lstSlotWrap.size(); i++) {
            for (Integer j = 1; j < (lstSlotWrap.size()-i); j++) {
                System.debug(LoggingLevel.ERROR,'******** 1. '+ ((DateTime)lstSlotWrap[j].Startdatetime > (DateTime)lstSlotWrap[j].Startdatetime));
                //System.debug(LoggingLevel.ERROR,'******** 2.'+ lstSlotWrap[j].Startdatetime);
                if (lstSlotWrap[j-1].Startdatetime > lstSlotWrap[j].Startdatetime) {  
                    temp = lstSlotWrap[j-1];
                    lstSlotWrap[j-1] = lstSlotWrap[j];
                    lstSlotWrap[j] = temp;
                }            
            }
        }*/ 
        ServiceResponse srobj = New ServiceResponse();
        srobj.lstSlot = lstSlotWrap;
        system.debug(JSON.serialize(lstSlotWrap));
        //RestContext.response.addHeader('Content-Type', 'application/json');
        //RestContext.response.responseBody = Blob.valueOf(JSON.serialize(lstSlotWrap));
        String resJson = JSON.serializePretty(lstSlotWrap);
        //return resJson;
        return srobj;
    }
    
    @HttpPUT
    global static void getScheduleResult() {
        RestRequest jsonString = RestContext.request;
        system.debug(LoggingLevel.ERROR, ('****' +jsonString.requestBody.toString()));
        reqParams reqObj = (reqParams)JSON.deserialize(jsonString.requestBody.toString(), reqParams.class);
        system.debug(LoggingLevel.ERROR, reqObj);
        
        //String stringDate1 = myDateAET.substring(6,10) + '-' + myDateAET.substring(0,2) + '-' + myDateAET.substring(3,5) + ' ' + myDateAET.substring(11,19);
        //String stringDate2 = myDateAET1.substring(6,10) + '-' + myDateAET1.substring(0,2) + '-' + myDateAET1.substring(3,5) + ' ' + myDateAET1.substring(11,19);
        /*ServiceAppointment sa = new ServiceAppointment(id=reqObj.saId);
        sa.ArrivalWindowStartTime = datetime.valueOf(reqObj.arrivalStart.replace('T', ' '));
        sa.ArrivalWindowEndTime = datetime.valueOf(reqObj.arrivalEnd.replace('T', ' '));
        update sa;*/
        FSL.ScheduleResult scheduleResult = FSL.ScheduleService.Schedule(reqObj.policyId, reqObj.saId);
        system.debug(':::::::::::' + scheduleResult);
    }
    
    @HttpDelete
    global static void updateScheduleAppmnt() {
        RestRequest jsonString = RestContext.request;
        system.debug(LoggingLevel.ERROR, ('****' +jsonString.requestBody.toString()));
        reqParams reqObj = (reqParams)JSON.deserialize(jsonString.requestBody.toString(), reqParams.class);
        system.debug(LoggingLevel.ERROR, reqObj);
        
        //String stringDate1 = myDateAET.substring(6,10) + '-' + myDateAET.substring(0,2) + '-' + myDateAET.substring(3,5) + ' ' + myDateAET.substring(11,19);
        //String stringDate2 = myDateAET1.substring(6,10) + '-' + myDateAET1.substring(0,2) + '-' + myDateAET1.substring(3,5) + ' ' + myDateAET1.substring(11,19);
        
        ServiceAppointment sa = new ServiceAppointment(id=reqObj.saId);
        sa.ArrivalWindowStartTime = datetime.valueOf(reqObj.arrivalStart.replace('T', ' ')).addHours(10);
        sa.ArrivalWindowEndTime = datetime.valueOf(reqObj.arrivalEnd.replace('T', ' ')).addHours(10);
        sa.EarliestStartTime  = datetime.valueOf(reqObj.arrivalStart.replace('T', ' ')).addHours(10);
        update sa;
    }
    
    public class reqParams {
        public String saId {get;set;}
        public String policyId {get;set;}
        public String arrivalStart {get;set;}
        public String arrivalEnd {get;set;}
    }
    
    public static void testTempMethod(){
        Integer i = 0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
    }

}